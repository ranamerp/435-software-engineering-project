{"version":3,"sources":["components/MyMap.jsx"],"names":["MyMap","stateStyle","fillColor","fillOpacity","color","weight","countryStyle","OnEachState","state","layer","state_name","properties","NAME","Start","convertDate2","JSON","stringify","props","startDate","End","endDate","Dte","convertDate","data","created_at","reported_incidents","tweet2","length","Location_Name","user","location","includes","search","STUSPS","compareDate","state_Count","options","bindPopup","OnEachCountry","country","country_name","ADM0_A3","country_Count","date","date2","substring","concat","start","end","parseInt","style","height","width","zoom","this","maxBounds","center","minZoom","ref","map","doubleClickZoom","countries","features","onEachFeature","Math","random","states","Component"],"mappings":"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","file":"static/js/5.da3bb863.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport countries from './../data/countries.json';\r\nimport states from './../data/states.json';\r\nimport {Map, GeoJSON} from \"react-leaflet\"\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"./MyMap.css\";\r\n\r\n\r\nclass MyMap extends Component {\r\n   \r\n    \r\n    stateStyle = {\r\n        fillColor: \"white\",\r\n        fillOpacity: 1,\r\n        color: \"black\",\r\n        weight: 0.8\r\n\r\n    };\r\n\r\n    countryStyle = {\r\n        fillColor: \"white\",\r\n        fillOpacity: 1,\r\n        color: \"black\",\r\n        weight: 1\r\n\r\n    };\r\n    convertDate(date){\r\n        var date2 = \"\"\r\n        switch(date.substring(5,8)){\r\n            case \"Jan\":\r\n                date2 = date2.concat(\"1\");\r\n            break;\r\n            case \"Feb\":\r\n                date2 = date2.concat(\"2\");\r\n            break;\r\n            case \"Mar\":\r\n                date2 = date2.concat(\"3\");\r\n            break;\r\n            case \"Apr\":\r\n                date2 = date2.concat(\"4\");\r\n            break;\r\n            case \"May\":\r\n                date2 = date2.concat(\"5\");\r\n            break;\r\n            case \"Jun\":\r\n                date2 = date2.concat(\"6\");\r\n            break;\r\n            case \"Jul\":\r\n                date2 = date2.concat(\"7\");\r\n            break;\r\n            case \"Aug\":\r\n                date2 = date2.concat(\"8\");\r\n            break;\r\n            case \"Sep\":\r\n                date2 = date2.concat(\"9\");\r\n            break;\r\n            case \"Oct\":\r\n                date2 = date2.concat(\"10\");\r\n            break;\r\n            case \"Nov\":\r\n                date2 = date2.concat(\"11\");\r\n            break;\r\n            case \"Dec\":\r\n                date2 = date2.concat(\"12\");\r\n            break;\r\n            default:\r\n                date2 = date2.concat(\"??\");\r\n                break;\r\n            }\r\n        date2 = date2.concat(\"/\");\r\n        date2 = date2.concat(date.substring(9,11)); //day\r\n        date2 = date2.concat(\"/\");\r\n        date2 = date2.concat(date.substring(27,31)); //year\r\n        return date2;\r\n    }\r\n\r\n    convertDate2(date){\r\n        var date2 = \"\";\r\n        date2 = date2.concat(date.substring(6,8)); //month\r\n        date2 = date2.concat(\"/\");\r\n        date2 = date2.concat(date.substring(9,11)); //day\r\n        date2 = date2.concat(\"/\");\r\n        date2 = date2.concat(date.substring(1,5)); //year\r\n        return date2;\r\n    }\r\n\r\n    compareDate(start,end,date){\r\n        if(parseInt(start.substring(6)) > parseInt(date.substring(6))){ // if the year is bigger in chosen start date over tweet\r\n            return false;\r\n        }\r\n        if((parseInt(start.substring(6)) === parseInt(date.substring(6)) && // if its in the same year\r\n            parseInt(start.substring(0,2)) > parseInt(date.substring(0,2)))){ // month diff\r\n            return false;\r\n        }\r\n        if((parseInt(start.substring(6)) === parseInt(date.substring(6)) && // if its in the same year\r\n            parseInt(start.substring(0,2)) === parseInt(date.substring(0,2)) && // if its in the same month too\r\n            parseInt(start.substring(3,5)) > parseInt(date.substring(3,5)))){ // day diff\r\n            return false;\r\n        }\r\n        if(parseInt(end.substring(6)) < parseInt(date.substring(6))){ // if the year is smaller in chosen end date over tweet\r\n            return false;\r\n        }\r\n        if((parseInt(end.substring(6)) === parseInt(date.substring(6)) && // if its in the same year\r\n            parseInt(end.substring(0,2)) < parseInt(date.substring(0,2)))){ // month diff\r\n            return false;\r\n        }\r\n        if((parseInt(end.substring(6)) === parseInt(date.substring(6)) && // if its in the same year\r\n            parseInt(end.substring(0,2)) === parseInt(date.substring(0,2)) && // if its in the same month too\r\n            parseInt(end.substring(3,5)) < parseInt(date.substring(3,5)))){ // day diff\r\n            return false;\r\n        }\r\n        return true;\r\n        \r\n    }\r\n\r\n    //`````````````````````````````````````````````````````````````````````````\r\n\r\n    OnEachState = (state, layer) => { // loops thru every state\r\n        const state_name = state.properties.NAME; // name of state\r\n        var Start = this.convertDate2(JSON.stringify(this.props.startDate)); \r\n        var End = this.convertDate2(JSON.stringify(this.props.endDate)); \r\n        var Dte = this.convertDate(JSON.stringify(this.props.data[1].created_at)); \r\n       // var Date = this.props.startDate;\r\n        state.properties.reported_incidents = 0; // reported incidents\r\n        for(var tweet2 = 0; tweet2<this.props.data.length;tweet2++){ // loops thru tweet list\r\n            Dte = this.convertDate(JSON.stringify(this.props.data[tweet2].created_at)); \r\n            var Location_Name = JSON.stringify(this.props.data[tweet2].user.location);\r\n            if( (Location_Name.includes(this.props.search))\r\n            && (Location_Name.includes(state.properties.NAME) || Location_Name.includes(state.properties.STUSPS)) \r\n            && (this.compareDate(Start,End,Dte)) ){ // checks if the tweet location matches any state name\r\n                state.properties.reported_incidents++;\r\n            }\r\n        }\r\n        const state_Count = state.properties.reported_incidents;\r\n \r\n        if(state_Count === 0){\r\n            layer.options.fillColor = \"white\";\r\n        }else if(state_Count < 5){\r\n            layer.options.fillColor = \"gray\";\r\n        }else if(state_Count < 100){\r\n            layer.options.fillColor = \"yellow\";\r\n        }else if(state_Count < 500){\r\n            layer.options.fillColor = \"orange\";\r\n        }else if(state_Count < 1000){\r\n            layer.options.fillColor = \"red\";\r\n        }else if(state_Count < 5000){\r\n            layer.options.fillColor = \"dark red\";\r\n        }\r\n        \r\n        layer.bindPopup(`State: ${state_name} <br> Tweets: ${state_Count}`);\r\n        \r\n    }\r\n\r\n    //```````````````````````````````````````````````````````````````````````\r\n\r\n    OnEachCountry = (country, layer) => { // loops thru every country\r\n\r\n        const country_name = country.properties.NAME; // name of country\r\n        var Start = this.convertDate2(JSON.stringify(this.props.startDate)); \r\n        var End = this.convertDate2(JSON.stringify(this.props.endDate)); \r\n        var Dte = this.convertDate(JSON.stringify(this.props.data[1].created_at)); \r\n       // var Date = this.props.startDate\r\n       // if(this.compareDate(Start,End,Dte)){//\r\n         //   Date = \"yeet boolin\" ;\r\n        //}\r\n        //this.convertDate(JSON.stringify(this.props.data[1].created_at));\r\n        country.properties.reported_incidents = 0; // reported incidents\r\n        for(var tweet2 = 0; tweet2<this.props.data.length;tweet2++){ // loops thru tweet list\r\n            var Location_Name = JSON.stringify(this.props.data[tweet2].user.location);\r\n            Dte = this.convertDate(JSON.stringify(this.props.data[tweet2].created_at)); \r\n            //\r\n            if(    (Location_Name.includes(this.props.search))\r\n                    && \r\n                    (Location_Name.includes(country.properties.NAME) || Location_Name.includes(country.properties.ADM0_A3))\r\n                    && \r\n                    (this.compareDate(Start,End,Dte)) )\r\n            { // checks if the tweet location matches any country name and date\r\n                country.properties.reported_incidents++;\r\n            }\r\n        }\r\n        if(country.properties.NAME === \"Norway\"){\r\n            country.properties.reported_incidents = 0 ;\r\n        }\r\n        const country_Count = country.properties.reported_incidents;\r\n\r\n        if(country_Count === 0){\r\n            layer.options.fillColor = \"white\";\r\n        }else if(country_Count < 5){\r\n            layer.options.fillColor = \"gray\";\r\n        }else if(country_Count < 100){\r\n            layer.options.fillColor = \"yellow\";\r\n        }else if(country_Count < 500){\r\n            layer.options.fillColor = \"orange\";\r\n        }else if(country_Count < 1000){\r\n            layer.options.fillColor = \"red\";\r\n        }else if(country_Count < 5000){\r\n            layer.options.fillColor = \"dark red\";\r\n        }\r\n        \r\n        layer.bindPopup(`Country: ${country_name} <br> Tweets: ${country_Count} `);\r\n        \r\n    }\r\n    \r\n    //```````````````````````````````````````````````````````````````````````\r\n    //```````````````````````````````````````````````````````````````````````\r\n    render() { \r\n        return (\r\n        <div>\r\n            <Map \r\n                style={{height:\"50vh\", width: \"50vw\",}}\r\n                zoom={JSON.stringify(this.props.startDate).substring(1,2)}\r\n                maxBounds={[[-60,-180], [80,220]]}\r\n                center= {[40,40]}\r\n                minZoom={2}\r\n                ref={(ref) => { this.map = ref; }}\r\n                doubleClickZoom= {\"\".concat(JSON.stringify(this.props.data).substring(0,2))}\r\n               \r\n            >\r\n            \r\n                <GeoJSON\r\n                    key={JSON.stringify(this.props.startDate).concat(JSON.stringify(this.props.data).substring(0,2)).concat(this.props.endDate).concat(this.props.search).concat(JSON.stringify(Math.random(5000000)))}\r\n                    style = {this.countryStyle}\r\n                    data = {countries.features}\r\n                    \r\n                    onEachFeature = {this.OnEachCountry}\r\n                    \r\n                ></GeoJSON>\r\n                <GeoJSON\r\n                    key={JSON.stringify(this.props.startDate).concat(this.props.endDate).concat(this.props.search).concat(JSON.stringify(this.props.data).substring(0,2))}\r\n                    style = {this.stateStyle}\r\n                    data = {states.features}\r\n                    onEachFeature = {this.OnEachState}\r\n                ></GeoJSON>\r\n\r\n            </Map>\r\n            <br></br>\r\n\r\n            <br></br>\r\n        </div>  );\r\n    }\r\n}\r\n \r\nexport default MyMap;"],"sourceRoot":""}