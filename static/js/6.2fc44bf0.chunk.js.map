{"version":3,"sources":["components/TimeSeries.jsx"],"names":["TimeSeries","filtered_data","chart_data","labels","datasets","label","data","fill","backgroundColor","borderColor","date","date2","substring","concat","Start","this","convertDate2","JSON","stringify","props","startDate","End","endDate","Tweet_Date","convertDate","created_at","Date","modified_array","push","parseInt","object_array","i","length","count","dates","tweets","temp_count","temp_date","quantity","date_to_date_range","style","height","width","dataFieldMaker","Component"],"mappings":"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","file":"static/js/6.2fc44bf0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2'\r\n\r\n\r\nclass TimeSeries extends Component {\r\n    \r\n    filtered_data = []\r\n\r\n   chart_data = {\r\n    labels: [],\r\n    datasets: [\r\n      {\r\n        label: \"Tweets\",\r\n        data: [],\r\n        fill: true,\r\n        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n        borderColor: \"rgba(75,192,192,1)\"\r\n      }\r\n    ]\r\n  };\r\n\r\n    convertDate(date){\r\n        var date2 = \"\"\r\n        switch(date.substring(5,8)){\r\n            case \"Jan\":\r\n                date2 = date2.concat(\"1\");\r\n            break;\r\n            case \"Feb\":\r\n                date2 = date2.concat(\"2\");\r\n            break;\r\n            case \"Mar\":\r\n                date2 = date2.concat(\"3\");\r\n            break;\r\n            case \"Apr\":\r\n                date2 = date2.concat(\"4\");\r\n            break;\r\n            case \"May\":\r\n                date2 = date2.concat(\"5\");\r\n            break;\r\n            case \"Jun\":\r\n                date2 = date2.concat(\"6\");\r\n            break;\r\n            case \"Jul\":\r\n                date2 = date2.concat(\"7\");\r\n            break;\r\n            case \"Aug\":\r\n                date2 = date2.concat(\"8\");\r\n            break;\r\n            case \"Sep\":\r\n                date2 = date2.concat(\"9\");\r\n            break;\r\n            case \"Oct\":\r\n                date2 = date2.concat(\"10\");\r\n            break;\r\n            case \"Nov\":\r\n                date2 = date2.concat(\"11\");\r\n            break;\r\n            case \"Dec\":\r\n                date2 = date2.concat(\"12\");\r\n            break;\r\n            default:\r\n                date2 = date2.concat(\"??\");\r\n                break;\r\n            }\r\n        date2 = date2.concat(\"/\");\r\n        date2 = date2.concat(date.substring(9,11)); //day\r\n        date2 = date2.concat(\"/\");\r\n        date2 = date2.concat(date.substring(27,31)); //year\r\n        return date2;\r\n    }\r\n\r\n    convertDate2(date){\r\n        var date2 = \"\";\r\n        date2 = date2.concat(date.substring(6,8)); //month\r\n        date2 = date2.concat(\"/\");\r\n        date2 = date2.concat(date.substring(9,11)); //day\r\n        date2 = date2.concat(\"/\");\r\n        date2 = date2.concat(date.substring(1,5)); //year\r\n        return date2;\r\n    }\r\n\r\n    dataFieldMaker(){\r\n        var Start = this.convertDate2(JSON.stringify(this.props.startDate)); // Nav Bar's Search Date\r\n        var End = this.convertDate2(JSON.stringify(this.props.endDate)); // Nav Bar's End Date\r\n        var Tweet_Date = this.convertDate(JSON.stringify(this.props.data[0].created_at)) // First Tweet's Date\r\n        var Date = Start // Set up for while loop, so the date will loop from start to end and add the array to the state\r\n        var modified_array = []\r\n        modified_array.push(Start) //adds date to our list of dates we will be using for charting\r\n        while( ((Date.substring(0,2) !== End.substring(0,2)) && (Date.substring(6) === End.substring(6)))\r\n        ^( ( parseInt(Date.substring(6)) < parseInt(End.substring(6) )) )\r\n        ){ // checks if the date's year hits the end's year or if theyre on the same year if the month hits\r\n            \r\n            if(parseInt(Date.substring(0,2)) < 12){ // Is it the last month of the year, if so were updating the year and reseting the month\r\n                Date = JSON.stringify(parseInt(Date.substring(0,2))+1).concat(Date.substring(2)) // Makes the date bigger by a month compared to the last date given, default being the start date\r\n                if(Date === End){ // eyoo if we got the same date as the End date we don't have to count it twice\r\n                    break;\r\n                }\r\n                modified_array.push(Date) // adds date to our list of dates we will be using for charting\r\n            }else{\r\n                Date = \"01\".concat(Date.substring(2,6)).concat(JSON.stringify(parseInt(Date.substring(6))+1)) // checks if we crossed a year, if we did, the next date starts in the 1st month and a new year\r\n                if(Date === End){ // no dojble count\r\n                    break;\r\n                }\r\n                modified_array.push(Date) // adds date to our list of dates we will be using for charting\r\n            }\r\n        }\r\n        modified_array.push(End)\r\n        var object_array = []\r\n        \r\n        for(var i =0; i< modified_array.length;i++){\r\n            object_array.push({\r\n                date:modified_array[i],\r\n                count: 0\r\n            })\r\n            this.filtered_data = object_array\r\n            \r\n        }\r\n        \r\n        \r\n        \r\n        //````````````````````````````````````````````````````````````\r\n        // Dates done above, mapping tweets done below\r\n        //````````````````````````````````````````````````````````````\r\n\r\n        for(var dates = 0; dates < this.filtered_data.length; dates++){\r\n            this.filtered_data[dates].count = 0\r\n        }\r\n        for(var tweets = 0; tweets<this.props.data.length;tweets++){ // loops through all the given tweets\r\n            Tweet_Date = this.convertDate(JSON.stringify(this.props.data[tweets].created_at)) // turns the tweet's date into a comparable format \r\n            \r\n            for(dates = 0; dates < this.filtered_data.length; dates++){ // loops thru all of the dates we created as points in the line graph\r\n                if((     (parseInt(Tweet_Date.substring(6)) === parseInt(this.filtered_data[dates].date.substring(6))) &&  // year\r\n                        (parseInt(Tweet_Date.substring(0,2)) === parseInt(this.filtered_data[dates].date.substring(0,2))) && // month\r\n                        (parseInt(Tweet_Date.substring(3,5)) < parseInt(this.filtered_data[dates].date.substring(3,5))) // checks if its in the same month but before it so it gets counted\r\n                    )^(\r\n                        ((parseInt(Tweet_Date.substring(6)) === parseInt(this.filtered_data[dates].date.substring(6))) && // or the month before it but after the last counted point in the last month\r\n                        (parseInt(Tweet_Date.substring(0,2)) === (parseInt(this.filtered_data[dates].date.substring(0,2))-1)   ) && \r\n                        (parseInt(Tweet_Date.substring(3,5)) > parseInt(this.filtered_data[dates].date.substring(3,5))))\r\n                    )){\r\n                    this.filtered_data[dates].count = this.filtered_data[dates].count+1\r\n                }\r\n            }\r\n            this.filtered_data[this.filtered_data.length-1].count =0\r\n            this.filtered_data[0].count =0\r\n\r\n        if((     (parseInt(Tweet_Date.substring(6)) === parseInt(this.filtered_data[this.filtered_data.length-1].date.substring(6))) &&  // year\r\n            (parseInt(Tweet_Date.substring(0,2)) === parseInt(this.filtered_data[this.filtered_data.length-1].date.substring(0,2))) && // month\r\n            (parseInt(Tweet_Date.substring(3,5)) < parseInt(this.filtered_data[this.filtered_data.length-1].date.substring(3,5))) // checks if its in the same month but before it so it gets counted\r\n        )^(\r\n            ((parseInt(Tweet_Date.substring(6)) === parseInt(this.filtered_data[this.filtered_data.length-1].date.substring(6))) && // or the month before it but after the last counted point in the last month\r\n            (parseInt(Tweet_Date.substring(0,2)) === (parseInt(this.filtered_data[this.filtered_data.length-1].date.substring(0,2))-1)   ) && \r\n            (parseInt(Tweet_Date.substring(3,5)) > parseInt(this.filtered_data[this.filtered_data.length-1].date.substring(3,5))))\r\n        )){\r\n        this.filtered_data[this.filtered_data.length-1].count = this.filtered_data[this.filtered_data.length-1].count+1\r\n        }\r\n\r\n        if((     (parseInt(Tweet_Date.substring(6)) === parseInt(this.filtered_data[0].date.substring(6))) &&  // year\r\n            (parseInt(Tweet_Date.substring(0,2)) === parseInt(this.filtered_data[0].date.substring(0,2))) && // month\r\n            (parseInt(Tweet_Date.substring(3,5)) < parseInt(this.filtered_data[0].date.substring(3,5))) // checks if its in the same month but before it so it gets counted\r\n        )^(\r\n            ((parseInt(Tweet_Date.substring(6)) === parseInt(this.filtered_data[0].date.substring(6))) && // or the month before it but after the last counted point in the last month\r\n            (parseInt(Tweet_Date.substring(0,2)) === (parseInt(this.filtered_data[0].date.substring(0,2))-1)   ) && \r\n            (parseInt(Tweet_Date.substring(3,5)) > parseInt(this.filtered_data[0].date.substring(3,5))))\r\n        )){\r\n            this.filtered_data[0].count = this.filtered_data[0].count+1\r\n        }\r\n\r\n\r\n    }\r\n        if(Start === End){\r\n            this.filtered_data[this.filtered_data.length-1].count =0\r\n            this.filtered_data[0].count =0\r\n        }\r\n        var temp_count = []\r\n        var temp_date = []\r\n        for(var quantity = 0; quantity < this.filtered_data.length;quantity++){\r\n            temp_count.push(parseInt(this.filtered_data[quantity].count))\r\n            temp_date.push(this.date_to_date_range(this.filtered_data, quantity))\r\n        }\r\n        this.chart_data.labels = temp_date \r\n        this.chart_data.datasets[0].data = temp_count\r\n        \r\n    }\r\n    date_to_date_range(date, quantity){\r\n        if(quantity !== 0){\r\n            return (date[quantity-1].date.concat(\"-\").concat(date[quantity].date))\r\n        }\r\n        return date[quantity].date.concat(\"-\").concat(date[quantity].date)\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div style={{height:\"50vh\", width: \"50vw\",}}>\r\n\r\n                <br></br>\r\n                {this.dataFieldMaker()}\r\n                <Line\r\n                data = {this.chart_data}\r\n                />          \r\n\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default TimeSeries;"],"sourceRoot":""}